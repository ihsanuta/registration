// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "registration/app/model"

	mock "github.com/stretchr/testify/mock"
)

// TokenModule is an autogenerated mock type for the TokenModule type
type TokenModule struct {
	mock.Mock
}

// GenerateTokenJWT provides a mock function with given fields: user
func (_m *TokenModule) GenerateTokenJWT(user model.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(model.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: _a0
func (_m *TokenModule) Validate(_a0 string) (map[string]interface{}, error) {
	ret := _m.Called(_a0)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenModule interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenModule creates a new instance of TokenModule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenModule(t mockConstructorTestingTNewTokenModule) *TokenModule {
	mock := &TokenModule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
